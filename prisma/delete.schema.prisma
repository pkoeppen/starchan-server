generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions", "selectRelationCount", "orderByRelation", "orderByAggregateGroup", "interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Board {
  id        String   @id @db.VarChar(4)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(32)
  threads   Thread[]
  posts     Post[]
  roles     Role[]
  reports   Report[]
  bans      Ban[]
}

model Thread {
  id          BigInt   @id @db.BigInt
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  bumpedAt    DateTime @default(now())
  title       String
  boardId     String   @db.VarChar(4)
  rootPostId  BigInt   @db.BigInt
  views       Int      @default(0)
  sticky      Boolean  @default(false)
  anchored    Boolean  @default(false)
  locked      Boolean  @default(false)
  cycle       Boolean  @default(false)
  archived    Boolean  @default(false)
  willArchive Boolean  @default(false)
  board       Board    @relation(fields: [boardId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  rootPost    Post     @relation("ThreadRootPost", fields: [rootPostId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  posts       Post[]   @relation("ThreadPost")
  reports     Report[]
}

model Post {
  id                BigInt   @id @db.BigInt
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  ipAddress         String
  name              String   @db.VarChar(16)
  authorId          String   @db.Char(64)
  tripcode          String?  @db.Char(10)
  bodyHtml          String?
  bodyMd            String?
  bannedForThisPost Boolean  @default(false)
  sage              Boolean  @default(false)
  // Thread relations.
  threadId          BigInt?  @db.BigInt
  thread            Thread?  @relation("ThreadPost", fields: [threadId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  rootThread        Thread?  @relation("ThreadRootPost")
  // Post relations. All posts are attached to a root post.
  rootPostId        BigInt?
  rootPost          Post?    @relation("RootPost", fields: [rootPostId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  posts             Post[]   @relation("RootPost")
  references        Post[]   @relation("PostOnPost", references: [id])
  referencedBy      Post[]   @relation("PostOnPost", references: [id])
  // Board relation.
  boardId           String   @db.VarChar(4)
  board             Board    @relation(fields: [boardId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // File relations.
  files             File[]
  // User relation, if post created by a mod.
  userId            String?
  user              User?    @relation(fields: [userId], references: [id])
  // Report relations.
  reports           Report[]
  // Ban relations.
  bans              Ban[]
}

model File {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  filename  String
  mimetype  String
  size      Int
  nsfw      Boolean
  posts     Post[]
}

model User {
  id         String     @id @default(cuid())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  email      String     @unique
  salt       String     @db.Char(29)
  password   String     @db.Char(60)
  username   String     @unique
  roles      Role[]
  logEntries LogEntry[]
  posts      Post[]
  bans       Ban[]
}

model Role {
  id      String          @id @default(cuid())
  boardId String?         @db.VarChar(4)
  level   PermissionLevel
  board   Board?          @relation(fields: [boardId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  users   User[]
}

enum PermissionLevel {
  OWNER
  ADMIN
  MODERATOR
  JANITOR
}

model LogEntry {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  message   String
  metadata  Json?
}

enum ReportReason {
  SPAM
  OFFTOPIC
  ILLEGAL
}

model Stat {
  key   String @id
  value BigInt @db.BigInt
}

model Report {
  id        String       @id @default(cuid())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  postId    BigInt       @db.BigInt
  post      Post         @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  threadId  BigInt       @db.BigInt
  thread    Thread       @relation(fields: [threadId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  boardId   String       @db.VarChar(4)
  board     Board        @relation(fields: [boardId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reason    ReportReason
  ipAddress String
}

model Ban {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String
  duration  Int
  universal Boolean
  reason    String?
  postId    BigInt?  @db.BigInt
  boardId   String?  @db.VarChar(4)
  userId    String
  post      Post?    @relation(fields: [postId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  board     Board?   @relation(fields: [boardId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
